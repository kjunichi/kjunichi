{"ts":1363223380870,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('express')\n  , passport = require('passport')\n  , util = require('util')\n  , querystring = require(\"querystring\")\n  , TwitterStrategy = require('passport-twitter').Strategy;\n\nvar TWITTER_CONSUMER_KEY = \"GXhBKSpmqEf40OQtP3vpg\";\nvar TWITTER_CONSUMER_SECRET = \"XNmvwIAtVjJD5WZwtqjU9ZUIsLDJYQEFvoT4FDmCbw\";\n\n\n// Passport session setup.\n//   To support persistent login sessions, Passport needs to be able to\n//   serialize users into and deserialize users out of the session.  Typically,\n//   this will be as simple as storing the user ID when serializing, and finding\n//   the user by ID when deserializing.  However, since this example does not\n//   have a database of user records, the complete Twitter profile is serialized\n//   and deserialized.\npassport.serializeUser(function(user, done) {\n  done(null, user);\n});\n\npassport.deserializeUser(function(obj, done) {\n  done(null, obj);\n});\n\n\n// Use the TwitterStrategy within Passport.\n//   Strategies in passport require a `verify` function, which accept\n//   credentials (in this case, a token, tokenSecret, and Twitter profile), and\n//   invoke a callback with a user object.\nvar ts = new TwitterStrategy({\n    consumerKey: TWITTER_CONSUMER_KEY,\n    consumerSecret: TWITTER_CONSUMER_SECRET,\n    callbackURL: \"https://afternoon-ridge-9228.herokuapp.com/auth/twitter/callback\"\n  },\n  function(token, tokenSecret, profile, done) {\n    // asynchronous verification, for effect...\n    // �ȡ������ȥȡ�����������åȤ��桼�����������������ơ�APIá���ݤˤ�����Ȥ��롣\nprofile.twitter_token = token;\nprofile.twitter_token_secret = tokenSecret;\n    process.nextTick(function () {\n      \n      // To keep the example simple, the user's Twitter profile is returned to\n      // represent the logged-in user.  In a typical application, you would want\n      // to associate the Twitter account with a user record in your database,\n      // and return that user instead.\n      return done(null, profile);\n    });\n  }\n);\n\npassport.use(ts);\n\n//var app = express.createServer();\nvar app = express();\n\n// configure Express\napp.configure(function() {\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'ejs');\n  app.use(express.logger());\n  app.use(express.cookieParser());\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(express.session({ secret: 'keyboard cat' }));\n  // Initialize Passport!  Also use passport.session() middleware, to support\n  // persistent login sessions (recommended).\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(app.router);\n  app.use(express.static(__dirname + '/public'));\n});\n\n\napp.get('/', function(req, res){\n  res.render('index', { user: req.user });\n});\n\napp.get('/account', ensureAuthenticated, function(req, res){\n  res.render('account', { user: req.user });\n});\n\napp.get('/login', function(req, res){\n  res.render('login', { user: req.user });\n});\n\n// GET /auth/twitter\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  The first step in Twitter authentication will involve redirecting\n//   the user to twitter.com.  After authorization, the Twitter will redirect\n//   the user back to this application at /auth/twitter/callback\napp.get('/auth/twitter',\n  passport.authenticate('twitter'),\n  function(req, res){\n    // The request will be redirected to Twitter for authentication, so this\n    // function will not be called.\n  });\n\n// GET /auth/twitter/callback\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  If authentication fails, the user will be redirected back to the\n//   login page.  Otherwise, the primary route function function will be called,\n//   which, in this example, will redirect the user to the home page.\napp.get('/auth/twitter/callback', \n  passport.authenticate('twitter', { failureRedirect: '/login' }),\n  function(req, res) {\n    res.redirect('/');\n  });\n\napp.get('/logout', function(req, res){\n  req.logout();\n  res.redirect('/');\n});\n\napp.get('/search', ensureAuthenticated, function(req, res){\n  var keyword = req.query[\"keyword\"];\n    if(!keyword||keyword === \"\") {\n        keyword = \"kjunichi\";\n    }\n    var qkeyword = querystring.stringify({q:keyword});\n    // search tweets.\n    ts._oauth.getProtectedResource(\n        'https://api.twitter.com/1.1/search/tweets.json?'+qkeyword,\n        'GET',\n    req.user.twitter_token,\n    req.user.twitter_token_secret,\n    function (err, data, response) {\n        console.dir(req.user);\n        if(err) {\n            res.send(err, 500);\n            return;\n        }\n        //console.dir(data);\n        var jsonObj = JSON.parse(data);\n        res.render('search', {\n            user: req.user,\n            result: jsonObj\n        });\n    });\n});\n\napp.post('/search', ensureAuthenticated, function (req, res) {\n    res.contentType('application/json');\n    \n    //console.dir(req.user);\n    var keyword = req.query[\"keyword\"];\n    if(!keyword||keyword === \"\") {\n        keyword = \"kjunichi\";\n    }\n    // search tweets.\n    var twitter_oauth = new oauth.OAuth(\n        \"https://api.twitter.com/oauth/request_token\",\n        \"https://api.twitter.com/oauth/access_token\",\n    TWITTER_CONSUMER_KEY,\n    TWITTER_CONSUMER_SECRET,\n        \"1.0\",\n    null,\n        \"HMAC-SHA1\");\n    ts._oauth.getProtectedResource(\n        'https://api.twitter.com/1.1/search/tweets.json?q='+keyword,\n        'GET',\n    req.user.twitter_token,\n    req.user.twitter_token_secret,\n    function (err, data, response) {\n        //console.dir(req.user);\n        if(err) {\n            res.send(err, 500);\n            return;\n        }\n        //console.dir(data);\n        var jsonObj = JSON.parse(data);\n        res.json(jsonObj);\n    });\n});\n\nvar port = process.env.PORT || 5000;\napp.listen(port, function() {\n  console.log(\"Listening on \" + port);\n});\n\n// Simple route middleware to ensure user is authenticated.\n//   Use this route middleware on any resource that needs to be protected.  If\n//   the request is authenticated (typically via a persistent login session),\n//   the request will proceed.  Otherwise, the user will be redirected to the\n//   login page.\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) { return next(); }\n  res.redirect('/login')\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":6259}]],"length":6259}
{"contributors":[],"silentsave":false,"ts":1363223471167,"patch":[[{"diffs":[[0,"����"],[-1,"�"],[0,"ȥȡ����"],[-1,"��"],[1,"�"],[0,"�����åȤ�"],[-1,"�桼���"],[1,"桼"],[0,"����"]],"start1":1459,"start2":1459,"length1":30,"length2":25},{"diffs":[[0,"���ݤˤ���"],[-1,"��"],[1,"�"],[0,"Ȥ��롣\npro"]],"start1":1500,"start2":1500,"length1":18,"length2":18},{"diffs":[[0,"    "],[-1,"var twitter_oauth = new oauth.OAuth(\n        \"https://api.twitter.com/oauth/request_token\",\n        \"https://api.twitter.com/oauth/access_token\",\n    TWITTER_CONSUMER_KEY,\n    TWITTER_CONSUMER_SECRET,\n        \"1.0\",\n    null,\n        \"HMAC-SHA1\");"],[0,"\n   "]],"start1":5015,"start2":5015,"length1":255,"length2":8}]],"length":6007,"saved":false}
